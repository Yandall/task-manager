import {
  ArgumentsHost,
  Catch,
  ExceptionFilter,
  HttpStatus,
} from "@nestjs/common";
import { Prisma } from "@prisma/client";
// import { Prisma } from "@prisma/client";
import { Response } from "express";

type PgErrorMessage = {
  [key: string]: {
    code: string;
    message: string;
    cause?: string;
  };
};

/**
 * Class use to filter exceptions. If the exception is generated by TypeORM returns a custom response, else returns the exception
 */
@Catch()
export class PgExceptionFilter implements ExceptionFilter {
  catch(exception: any, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    if (exception instanceof Prisma.PrismaClientKnownRequestError) {
      const errorResponse = this.getErrorResponse(exception);
      return response.status(HttpStatus.BAD_REQUEST).json(errorResponse);
    }
    if (!exception.status)
      return response.status(HttpStatus.INTERNAL_SERVER_ERROR).json(exception);
    return response.status(exception.status).json(exception.response);
  }

  private getErrorResponse(exception: Prisma.PrismaClientKnownRequestError) {
    const errorResponse = this.errorResponses[exception.code];
    const fields = exception.meta.cause
      ? exception.meta.cause
      : exception.meta.target;
    errorResponse.cause = fields.toString();
    return errorResponse;
  }

  private readonly errorResponses: PgErrorMessage = {
    P2002: { code: "P2002", message: "Unique constraint failed" },
    P2025: { code: "P2025", message: "Couldn't satisfity relation" },
  };
}
